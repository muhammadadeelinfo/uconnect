{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { BASE_URL } from \"../../utils\";\nexport var onLogin = function onLogin(email, password) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(BASE_URL + \"mock-login\", {\n              email: email,\n              password: password\n            }));\n\n          case 3:\n            response = _context.sent;\n\n            if (!response) {\n              dispatch({\n                type: 'ON_ERROR',\n                payload: 'Login issue with API'\n              });\n            } else {\n              dispatch({\n                type: 'ON_LOGIN',\n                payload: response.data\n              });\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: 'ON_ERROR',\n              payload: _context.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};","map":{"version":3,"sources":["/home/muhammadadeelinfo/Documents/web samples/APPS REACT/A React Native/uconnect/src/redux/actions/userActions.ts"],"names":["axios","BASE_URL","onLogin","email","password","dispatch","post","response","type","payload","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT;AAsBA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAgBC,QAAhB,EAAqC;AAC1D,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoBL,KAAK,CAACM,IAAN,CAAyBL,QAAzB,iBAA+C;AACpEE,cAAAA,KAAK,EAALA,KADoE;AAEpEC,cAAAA,QAAQ,EAARA;AAFoE,aAA/C,CAFpB;;AAAA;AAEGG,YAAAA,QAFH;;AAOH,gBAAI,CAACA,QAAL,EAAe;AACbF,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAE,UADC;AAEPC,gBAAAA,OAAO,EAAE;AAFF,eAAD,CAAR;AAID,aALD,MAKO;AACLJ,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAE,UADC;AAEPC,gBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFX,eAAD,CAAR;AAID;;AAjBE;AAAA;;AAAA;AAAA;AAAA;AAmBHL,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAE,UADC;AAEPC,cAAAA,OAAO;AAFA,aAAD,CAAR;;AAnBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAyBD,CA1BM","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'react';\nimport { BASE_URL } from '../../utils';\n\nexport interface UserModel {\n  firstName: string;\n  lastName: string;\n  subscription: string;\n  token: string;\n}\n\nexport interface LoginAction {\n  readonly type: 'ON_LOGIN';\n  payload: UserModel;\n}\n\nexport interface ErrorAction {\n  readonly type: 'ON_ERROR';\n  payload: any;\n}\n\nexport type UserAction = LoginAction | ErrorAction;\n\n// we need to dispatch action\nexport const onLogin = (email: string, password: string) => {\n  return async (dispatch: Dispatch<UserAction>) => {\n    try {\n      const response = await axios.post<UserModel>(`${BASE_URL}mock-login`, {\n        email,\n        password,\n      });\n\n      if (!response) {\n        dispatch({\n          type: 'ON_ERROR',\n          payload: 'Login issue with API',\n        });\n      } else {\n        dispatch({\n          type: 'ON_LOGIN',\n          payload: response.data,\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: 'ON_ERROR',\n        payload: error,\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}